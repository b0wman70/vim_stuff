
          ____            __     _    ___              _______
         / __ )___  _____/ /_   | |  / (_)___ ___     /_  __(_)___  _____
        / __  / _ \/ ___/ __/   | | / / / __ `__ \     / / / / __ \/ ___/
       / /_/ /  __(__  ) /_     | |/ / / / / / / /    / / / / /_/ (__  )
      /_____/\___/____/\__/     |___/_/_/ /_/ /_/    /_/ /_/ .___/____/
                                                          /_/

                           Author: Pierpaolo Pupilli

                                 ____ ____ ____
                                ||c |||o |||m ||
                                ||__|||__|||__||
                                |/__\|/__\|/__\|


Count
Operator
Motion

Operator
========

d         delete
y         yank
c         change
v         visual select

D         delete until end of line
C         change until end of line

Motions
=======

(the text objects are considered motions)
(also the / search are considered motions!!)

hjkl      left-down-up-rigth

gg        first line
G         last line ([count]G go to [count] line)

H         top of the page (High)
M         middle of the page (Middle)
L         bottom of the page (Low)


}         next paraghrap
{         previous paragraph


0         begin of line
^         first column of line
$         end of line

w         forward 1 word
b         begin of the word (backward 1 word)
e         end of the word (forward to the end of the word)

f{char} to first left {char}
F{char} to first rigth {char}
t{char} before first left {char} (till char)
T{char} before first rigth {char} (till char)

To change, delete or insert on multiple rows in visual block mode:
I         insert
A         append
c         change

Text Objects (https://blog.carbonfive.com/vim-text-objects-the-definitive-guide/)
---------------------------------------------------------------------------------

Text object are considered as motion

i{x}        inside {x}
a{x}        all {x}

{x} can be: w (word), p (paragraph), t (tag), (, [, {, <, '. ", etc...

Ex:
diw delete inside word
dip delete inside paragraph





#####################################

m{char} set mark {char}
'{char} go to mark {char}

<C-o>   return to previous cursor position

*         search the word under the cursor
#         idem backward


#####################################

u         undo
CRTL-R    redo

o         insert row after curret row
O         insert row BEFORE curret row

p         past after the cursor
P         past before the cursor (N.B. useful to paste over a visual selection: it does NOT replace yank register!)

#####################################

Macro an registers
------------------

q{char}   Start new macro {char} recording. To finish q.
          Marco is saved in the regiser {char}

@{char}   execute macro {char}. Or @@ to execute last macro

:reg      show register contents

To change a macro:

"{char}p  past {char} register content
edit the macro
"{char}yy yank changed macro into register {char}
dd        delete changed text

#####################################

MISC
----

%         jump betweeen ( and ), or [ and ], or { and }
zz        center page on the cursor
<CRTL-d>  down a page
<CRTL-u>  up a page

:<C-f>        show command history

:sp [file]    splitta la finestra e nella seconda apre [file]
              Se non si specifica [file] apre lo stesso file nella seconda window.
              Se si vuole salvare il file con un nuovo nome usare:
              :sav [newfile]
              e la nuova window conterrà il nuovo file!

<C-w> [hjkl]  per muoversi tra finestre

:tabedit [file] apre [file]in una nuova tab

gt            per muoversi tra le tab



Per usare un comando in modalità inserimento:

<C-o><command>


For every line containing "foo", substitute all "bar" with "zzz"

:g/foo/s/bar/zzz/g

Works in ed(1) just like in its progeny.

For every line containing foo run macro q:
:g/foo/norm! @q


<CTRL-left>
<CTRL-right>	back e forward di una word in insert mode

#####################################

IdeaVIM
-------

Usare .ideavimrc

Per comodità:
File->Settings->Editor->VIM e far gestire CRTL-E a IDE (recent files)

gd        goto definition (back <C-o> and forward <C-i>)

CTRL-n        fuzzy find files
CTRL-f        fuzzy find text inside files
CRTL-e        show recent files
ALT-[->|<-]   navigate tabs

#####################################

Command mode
------------

:<range><command>    il <range> si può selezionare anche in visual mode! (prima si seleziona poi si preme :)









#####################################

Plugin management

Installare vim-plug (https://github.com/junegunn/vim-plug)

apt-get install fzf ripgrep

Su .vimrc:

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Initialize plugin system
call plug#end()



Lanciare :PlugInstall

Mappare <C-f> su :Files insernedo su .vimrc:
nnoremap <silent> <C-f> :Files<CR>


######################################

########### vim-fuggitive ############
:G                  git status
                    s on 'Unstaged' row to stage file
                    u on 'Stage' row to unstage file
                    X to rollback
                    (you can visual select multiple lines)
:G merge [options]  git merge [options]
:Gcommit            git commit

:h fugitive-staging-maps		Show commands for the status window

Conflicts
---------

In the :G view go to the conflict file row and 

dv                  (or :Givdiffsplit) open a 3 windows view with on the left the current branch version,
                    on the center the working tree file to edit and on the rigth the merge branch version.

                    You can edit manually the center file or go on the <<<<<<< HEAD row and
                    :diffget //2    to get the change from left
                    :diffget //3    to get the change from rigth

										(then you have to update the view with :diffupdate)

Then you can stage and commit

######################################

########### winresizer    ############
CTRL-e							go resize mode (h,j,k,l)
######################################

########### CRTL-P ############
<C-v>								To open file in a vertical split
<C-x>								To open file in a horizontal split
###############################

########## vim surround ##############

cs"<div>						(change surround) "hello world!" -> <div>hello world!</div>
cst'								(change surround tag) <div>hello world!</div> -> 'hello world!'
ds"									(delete surround) "hello world!" -> hello world!
ys<motion>"					(insert surround, a good mnemonic is "you surround") ex: ysiw" hello -> "hello" (As a special case, yss operates on the current line)
S"									(same as previous but operates on visual selection)

######################################




Per usare la bash in modalità vi:
set -o vi

Shortcut per bash in modalità normale:

Move to the start of line.		Ctrl + a
Move to the end of line.			Ctrl + e
Move forward a word.					Meta + f (a word contains alphabets and digits, no symbols)
Move backward a word.					Meta + b
Clear the screen.							Ctrl + l

